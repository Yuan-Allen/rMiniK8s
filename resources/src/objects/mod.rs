use std::{collections::HashMap, fmt::Debug};

use serde::{de::DeserializeOwned, Deserialize, Serialize};
use strum::Display;
use uuid::Uuid;

pub mod binding;
pub mod node;
pub mod object_reference;
pub mod pod;
pub mod service;

#[derive(Debug, Serialize, Deserialize, Clone, PartialEq)]
pub struct KubeObject {
    pub metadata: Metadata,
    #[serde(flatten)]
    pub resource: KubeResource,
}

#[derive(Debug, Serialize, Deserialize, Display, Clone, PartialEq)]
#[serde(tag = "kind")]
pub enum KubeResource {
    Pod(pod::Pod),
    Binding(binding::Binding),
    Node(node::Node),
    Service(service::Service),
}

#[derive(Debug, Serialize, Deserialize, Default, Clone, PartialEq)]
pub struct Metadata {
    /// Name must be unique within a namespace.
    /// Is required when creating resources,
    /// although some resources may allow a client
    /// to request the generation of an appropriate name automatically.
    /// Name is primarily intended for creation idempotence
    /// and configuration definition. Cannot be updated.
    pub name: String,
    /// UID is the unique in time and space value for this object.
    /// It is typically generated by the server
    /// on successful creation of a resource
    /// and is not allowed to change on PUT operations.
    /// Populated by the system. Read-only.
    pub uid: Option<Uuid>,
    /// Map of string keys and values that can be used to organize
    /// and categorize (scope and select) objects.
    /// May match selectors of replication controllers and services.
    #[serde(default)]
    pub labels: Labels,
}

pub type Labels = HashMap<String, String>;

impl KubeObject {
    pub fn kind(&self) -> String {
        self.resource.to_string().to_lowercase()
    }
    pub fn name(&self) -> String {
        self.metadata.name.to_owned()
    }
}

pub trait Object:
    Clone + Serialize + DeserializeOwned + Send + Sync + Debug + PartialEq + 'static
{
    fn uri(&self) -> String;
}

impl Object for KubeObject {
    fn uri(&self) -> String {
        format!(
            "/api/v1/{}s/{}",
            self.kind().to_lowercase(),
            self.name().to_lowercase()
        )
    }
}
